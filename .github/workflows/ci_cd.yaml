name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  SERVICE: ${{ secrets.SERVICE }}
  REGION: ${{ secrets.REGION }}
  TAG: latest

jobs:
  build_and_deploy:
    if: github.repository_owner == 'systemphil'
    runs-on: ubuntu-latest
    steps:
      - name: Check if running in the parent repository
        run: |
          if [ "${GITHUB_REPOSITORY}" != "systemphil/sphil" ]; then
          echo "This workflow is only intended for the parent repository. Skipping deployment."
          exit 1
          fi

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache restore
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('./Cargo.lock') }} }}

      - name: Install Rust
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: cargo build --release --package prepyrus_runner

      - name: Save to cache
        id: cache-save
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('./Cargo.lock') }} }}

      - name: Auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: _json_key
          password: "${{ secrets.GOOGLE_CREDENTIALS }}"
          registry: "${{ env.REGION }}-docker.pkg.dev"

      # Verify artifact registry exists, otherwise create one
      - name: Verify Artifact Registry
        run: |
          set +e  # Temporarily allow errors
          gcloud artifacts repositories describe ${{ env.SERVICE }} --location=${{ env.REGION }} --format='value(name)' > /dev/null 2>&1
          STATUS=$?  # Capture the exit status
          set -e  # Re-enable exit on error
          if [ $STATUS -ne 0 ]; then
              echo "üèóÔ∏è Artifact Registry not found. Attempting to create one..."
              gcloud artifacts repositories create ${{ env.SERVICE }} \
              --repository-format=docker \
              --location=${{ env.REGION }}
              gcloud artifacts repositories set-cleanup-policies ${{ env.SERVICE }} \
              --location=${{ env.REGION }} \
              --policy=artifact_repository_cleanup_policy.json
          else
              echo "‚úÖ Artifact Registry already exists."
          fi

      - name: Build and Push Container
        # NEXT_PUBLIC_ env variables have to be set during the build phase.
        run: |-
          docker build \
            --build-arg NEXT_PUBLIC_SITE_ROOT=${{secrets.NEXT_PUBLIC_SITE_ROOT}} \
            --build-arg NEXT_PUBLIC_GA_ID=${{secrets.NEXT_PUBLIC_GA_ID}} \
            -f Dockerfile \
            -t "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}" ./
          docker push "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{env.SERVICE}} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --max-instances=1 \
            --min-instances=default \
            --image="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ env.TAG }}"
